/** Represents the game canvas. */

class Space {
    field int enemyI; // Used for iterating over enemies.
    field int shipStartX, shipStartY;
    field Spaceship ship;
    field Array enemies;
    field Bullet shotBullet;

    function int getShipHeight()
    {
        return 10;
    }

    function int getShipWidth()
    {
        return 10;
    }

    function int getEnemiesCount()
    {
        return 1;
    }

    function int getEnemyWidth()
    {
        return 20;
    }

    function int getEnemyHeight()
    {
        return 20;
    }

    function int getBaseY()
    {
        return ScreenBounds.getHeight() - Space.getShipHeight() - 5;
    }

    constructor Space new()
    {
        let shipStartX = (ScreenBounds.getWidth() - Space.getShipWidth()) / 2;
        let shipStartY = ScreenBounds.getHeight() - Space.getShipHeight();
        let ship = Spaceship.new(
            shipStartX, 
            shipStartY, 
            Space.getShipWidth(), 
            Space.getShipHeight()
        );
        let enemies = Array.new(Space.getEnemiesCount());
        let enemyI = 0;
        while (enemyI < Space.getEnemiesCount()) {
            let enemies[enemyI] = Enemy.new(
                0, 
                0, 
                Space.getEnemyWidth(), 
                Space.getEnemyHeight()
            );
            let enemyI = enemyI + 1;
        }
        let shotBullet = null;

        return this;
    }
    
    method void draw()
    {
        do Screen.clearScreen();
        do drawSpaceship();
        do drawBaseDelimiter();
        do drawEnemies();
        do drawBullets();
        return;
    }
    
    method void drawSpaceship()
    {
        do Screen.drawRectangle(
            ship.getX(), 
            ship.getY(), 
            ship.getX2(), 
            ship.getY2()
        );
        return;
    }

    method void drawEnemies()
    {
        // TODO: Draw enemies on a grid.

        var Enemy enemy;

        let enemy = null;
        let enemyI = 0;

        while (enemyI < Space.getEnemiesCount()) {
            let enemy = enemies[enemyI];

            if (~(enemy = null)) {
                do Screen.drawRectangle(
                    enemy.getX(), 
                    enemy.getY(), 
                    enemy.getX2(), 
                    enemy.getY2()
                );
            }

            let enemyI = enemyI + 1;
        }

        return;
    }

    method void drawBullets()
    {
        if (~(shotBullet = null)) {
            do Screen.drawRectangle(
                shotBullet.getX(), 
                shotBullet.getY(), 
                shotBullet.getX2(), 
                shotBullet.getY2()
            );
        }

        return;
    }

    method void drawBaseDelimiter() {
        do Screen.drawRectangle(
            0,
            Space.getBaseY() - 2,
            ScreenBounds.getWidth(), 
            Space.getBaseY()
        );
        return;
    }

    method void act()
    {
        do ship.act();

        if (~(shotBullet = null)) {
            do shotBullet.act();
        }

        do detectCollisions(); 
                
        if (~(ship.getShotBullet() = null)) {
            let shotBullet = ship.getShotBullet();
        }

        return;
    }

    method void detectCollisions()
    {
        var int bulletX;
        var int bulletY;
        var Enemy enemy;

        if (~(shotBullet = null)) {
            let bulletX = shotBullet.getX();
            let bulletY = shotBullet.getY();

            if (bulletY = 0) {
                do shotBullet.dispose();
                let shotBullet = null;
            }

            let enemyI = 0;
            let enemy = null;
            
            while (enemyI < Space.getEnemiesCount()) {
                let enemy = enemies[enemyI];

                if ((bulletY < enemy.getY2()) & 
                    ((bulletX > enemy.getX()) & (bulletX < enemy.getX2()))) {
                    do shotBullet.dispose();
                    do enemy.dispose();
                    let shotBullet = null;
                    let enemies[enemyI] = null;
                }

                let enemyI = enemyI + 1;
            }
        }

        return;
    }
}

