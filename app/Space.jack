/** Represents the game canvas. */

class Space {
    field int enemyI; // Used for iterating over enemies.
    field int shipStartX, shipStartY;
    field Spaceship ship;
    field Array enemies;
    // TODO: Hold an array of bullets.
    field Bullet shotBullet;

    function int getShipHeight()
    {
        return 10;
    }

    function int getShipWidth()
    {
        return 10;
    }

    function int getEnemiesCount()
    {
        return 1;
    }

    function int getEnemyWidth()
    {
        return 20;
    }

    function int getEnemyHeight()
    {
        return 20;
    }

    constructor Space new()
    {
        let shipStartX = (ScreenBounds.getWidth() - Space.getShipWidth()) / 2;
        let shipStartY = ScreenBounds.getHeight() - Space.getShipHeight();
        let ship = Spaceship.new(shipStartX, shipStartY, Space.getShipWidth(), Space.getShipHeight());
        let enemies = Array.new(Space.getEnemiesCount());
        let enemyI = 0;
        while (enemyI < Space.getEnemiesCount()) {
            let enemies[enemyI] = Enemy.new(5, 5, Space.getEnemyWidth(), Space.getEnemyHeight());
            let enemyI = enemyI + 1;
        }
        let shotBullet = null;

        return this;
    }
    
    method void draw()
    {
        do Screen.clearScreen();
        do drawSpaceship();
        do drawEnemies();
        do drawBullets();
        return;
    }
    
    method void drawSpaceship()
    {
        do Screen.drawRectangle(ship.getX(), ship.getY(), ship.getX2(), ship.getY2());
        return;
    }

    method void drawEnemies()
    {
        // TODO: Draw enemies on a grid.
        let enemyI = 0;
        while (enemyI < Space.getEnemiesCount()) {
            do Screen.drawCircle(5, 5, 5);
            let enemyI = enemyI + 1;
        }

        return;
    }

    method void drawBullets()
    {
        if (~(shotBullet = null)) {
            do Screen.drawRectangle(shotBullet.getX(), shotBullet.getY(), shotBullet.getX2(), shotBullet.getY2());
        }

        return;
    }

    method void act()
    {
        do ship.act();

        // TODO: detect collisions:
        // 1. bullets vs. enemies (dispose both instances and clear screen)
        // 2. any enemy reaching base (game over)
        
        if (~(ship.getShotBullet() = null)) {
            // TODO: Add bullet to array of bullets in space.
            let shotBullet = ship.getShotBullet();
            do shotBullet.act();
        }

        return;
    }
}

