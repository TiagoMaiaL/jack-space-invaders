/** Represents the game canvas. */

class Space {
    field int enemyI;
    field int shipStartX, shipStartY;
    field Spaceship ship;
    field Array enemies;
    field int bulletI;
    field Array shotBullets;

    function int getShipHeight()
    {
        return 10;
    }

    function int getShipWidth()
    {
        return 10;
    }

    function int getEnemiesCount()
    {
        return 1;
    }

    function int getEnemyWidth()
    {
        return 20;
    }

    function int getEnemyHeight()
    {
        return 20;
    }

    function int getMaxBulletsCount()
    {
        return 10;
    }

    constructor Space new()
    {
        let shipStartX = (ScreenBounds.getWidth() - Space.getShipWidth()) / 2;
        let shipStartY = ScreenBounds.getHeight() - Space.getShipHeight();
        let ship = Spaceship.new(shipStartX, shipStartY, Space.getShipWidth(), Space.getShipHeight());
        let enemies = Array.new(Space.getEnemiesCount());
        let enemyI = 0;
        while (enemyI < Space.getEnemiesCount()) {
            let enemies[enemyI] = Enemy.new(5, 5, Space.getEnemyWidth(), Space.getEnemyHeight());
            let enemyI = enemyI + 1;
        }
        let shotBullets = Array.new(Space.getMaxBulletsCount());
        let bulletI = 0;
        while (bulletI < Space.getMaxBulletsCount()) {
            let shotBullets[bulletI] = null;
            let bulletI = bulletI + 1;
        }

        return this;
    }
    
    method void draw()
    {
        do Screen.clearScreen();
        do drawSpaceship();
        do drawEnemies();
        do drawBullets();
        return;
    }
    
    method void drawSpaceship()
    {
        do Screen.drawRectangle(ship.getX(), ship.getY(), ship.getX2(), ship.getY2());
        return;
    }

    method void drawEnemies()
    {
        // TODO: Draw enemies on a grid.
        let enemyI = 0;
        while (enemyI < Space.getEnemiesCount()) {
            do Screen.drawCircle(5, 5, 5);
            let enemyI = enemyI + 1;
        }

        return;
    }

    method void drawBullets()
    {
        var Bullet bullet;
        let bullet = null;
        let bulletI = 0;

        while (bulletI < Space.getMaxBulletsCount()) {
            let bullet = shotBullets[bulletI]; 

            if (~(bullet = null)) {
                do Screen.drawRectangle(bullet.getX(), bullet.getY(), bullet.getX2(), bullet.getY2());
            }

            let bulletI = bulletI + 1;
        }

        return;
    }

    method void act()
    {
        var Bullet bullet;

        do ship.act();

        // TODO: detect collisions:
        // 1. bullets vs. enemies (dispose both instances and clear screen)
        // 2. any enemy reaching base (game over)

        let bulletI = 0;
        let bullet = null;
        while (bulletI < Space.getMaxBulletsCount()) {
            let bullet = shotBullets[bulletI];

            if (~(bullet = null)) {
                do bullet.act();

                if (bullet.getY() = 0) {
                    do bullet.dispose();
                    let shotBullets[bulletI] = null;
                }    
            }

            let bulletI = bulletI + 1;
        }
        
        if (~(ship.getShotBullet() = null)) {
            let bulletI = 0;
            let bullet = null;
            while (bulletI < Space.getMaxBulletsCount()) {
                let bullet = shotBullets[bulletI];
                if (bullet = null) {
                    let shotBullets[bulletI] = ship.getShotBullet();
                }
                let bulletI = bulletI + 1;
            }
        }

        return;
    }
}

