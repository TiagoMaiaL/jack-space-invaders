/** Represents an enemy to be destroyed. */

class Enemy {
    field int width, height;
    field int x, y;
    field int cycleCount;

    function int getDebounceFactor()
    {
        return 50;
    }

    method int getWidth()
    {
        return width;
    }

    method int getHeight()
    {
        return height;
    }

    method int getX()
    {
        return x;
    }

    method int getY()
    {
        return y;
    }

    method int getX2()
    {
        return x + width;
    }

    method int getY2()
    {
        return y + height;
    }

    constructor Enemy new(int eX, int eY, int eWidth, int eHeight)
    {
        let x = eX;
        let y = eY;
        let width = eWidth;
        let height = eHeight;
        let cycleCount = 0;
        return this;
    }

    method void act()
    {
        if (Math.divide(cycleCount, Enemy.getDebounceFactor()) = 1) {
            do tryInvading();
            let cycleCount = 0;
        } else {
            let cycleCount = cycleCount + 1;
        }

        return;
    }

    method void tryInvading()
    {
        let y = y + 1;
        return;
    }

    method void dispose()
    {
        do Memory.deAlloc(this);
        return;
    }
}
